<?php

namespace Illuminate\Redis {

    /**
     * @method mixed append($key, $value)
     * @method mixed auth($password)
     * @method mixed bgrewriteaof()
     * @method mixed bgsave()
     * @method mixed bitCount($key)
     * @method mixed bitOp($operation, $retKey, $key1, ...$otherKeys)
     * @method mixed bitpos($key, $bit, $start = 0, $end = null)
     * @method mixed blPop($keys, $timeout)
     * @method mixed brPop(array $keys, $timeout)
     * @method mixed brpoplpush($srcKey, $dstKey, $timeout)
     * @method mixed bzPopMax($key1, $key2, $timeout)
     * @method mixed bzPopMin($key1, $key2, $timeout)
     * @method mixed clearLastError()
     * @method mixed client($command, $value = '')
     * @method mixed close()
     * @method mixed config($operation, $key, $value)
     * @method mixed dbSize()
     * @method mixed decr($key)
     * @method mixed decrBy($key, $value)
     * @method mixed del($key1, ...$otherKeys)
     * @method mixed delete($key1, $key2 = null, $key3 = null)
     * @method mixed discard()
     * @method mixed dump($key)
     * @method mixed echo($message)
     * @method mixed eval($script, $args = array(), $numKeys = 0)
     * @method mixed evalSha($scriptSha, $args = array(), $numKeys = 0)
     * @method mixed evaluate($script, $args = array(), $numKeys = 0)
     * @method mixed evaluateSha($scriptSha, $args = array(), $numKeys = 0)
     * @method mixed exec()
     * @method mixed exists($key)
     * @method mixed expire($key, $ttl)
     * @method mixed expireAt($key, $timestamp)
     * @method mixed flushAll()
     * @method mixed flushDB()
     * @method mixed geoadd($key, $longitude, $latitude, $member)
     * @method mixed geodist($key, $member1, $member2, $unit = null)
     * @method mixed geohash($key, ...$member)
     * @method mixed geopos(string $key, string $member)
     * @method mixed georadius($key, $longitude, $latitude, $radius, $unit, array $options = null)
     * @method mixed georadiusbymember($key, $member, $radius, $units, array $options = null)
     * @method mixed get($key)
     * @method mixed getAuth()
     * @method mixed getBit($key, $offset)
     * @method mixed getDbNum()
     * @method mixed getHost()
     * @method mixed getKeys($pattern)
     * @method mixed getLastError()
     * @method mixed getMode()
     * @method mixed getMultiple(array $keys)
     * @method mixed getOption($option)
     * @method mixed getPersistentID()
     * @method mixed getPort()
     * @method mixed getRange($key, $start, $end)
     * @method mixed getReadTimeout()
     * @method mixed getSet($key, $value)
     * @method mixed getTimeout()
     * @method mixed hDel($key, $hashKey1, ...$otherHashKeys)
     * @method mixed hExists($key, $hashKey)
     * @method mixed hGet($key, $hashKey)
     * @method mixed hGetAll($key)
     * @method mixed hIncrBy($key, $hashKey, $value)
     * @method mixed hIncrByFloat($key, $field, $increment)
     * @method mixed hKeys($key)
     * @method mixed hLen($key)
     * @method mixed hMGet($key, $hashKeys)
     * @method mixed hMSet($key, $hashKeys)
     * @method mixed hScan($key, &$iterator, $pattern = null, $count = 0)
     * @method mixed hSet($key, $hashKey, $value)
     * @method mixed hSetNx($key, $hashKey, $value)
     * @method mixed hStrLen(string $key, string $field)
     * @method mixed hVals($key)
     * @method mixed incr($key)
     * @method mixed incrBy($key, $value)
     * @method mixed incrByFloat($key, $increment)
     * @method mixed info($option = null)
     * @method mixed isConnected()
     * @method mixed keys($pattern)
     * @method mixed lGet($key, $index)
     * @method mixed lGetRange($key, $start, $end)
     * @method mixed lIndex($key, $index)
     * @method mixed lInsert($key, $position, $pivot, $value)
     * @method mixed lLen($key)
     * @method mixed lPop($key)
     * @method mixed lPush($key, ...$value1)
     * @method mixed lPushx($key, $value)
     * @method mixed lRange($key, $start, $end)
     * @method mixed lRem($key, $value, $count)
     * @method mixed lRemove($key, $value, $count)
     * @method mixed lSet($key, $index, $value)
     * @method mixed lSize($key)
     * @method mixed lTrim($key, $start, $stop)
     * @method mixed lastSave()
     * @method mixed listTrim($key, $start, $stop)
     * @method mixed mget(array $array)
     * @method mixed migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false)
     * @method mixed move($key, $dbIndex)
     * @method mixed mset(array $array)
     * @method mixed msetnx(array $array)
     * @method mixed multi($mode)
     * @method mixed object($string = '', $key = '')
     * @method mixed pExpire($key, $ttl)
     * @method mixed pExpireAt($key, $timestamp)
     * @method mixed persist($key)
     * @method mixed pfAdd($key, array $elements)
     * @method mixed pfCount($key)
     * @method mixed pfMerge($destKey, array $sourceKeys)
     * @method mixed ping()
     * @method mixed psetex($key, $ttl, $value)
     * @method mixed psubscribe($patterns, $callback)
     * @method mixed pttl($key)
     * @method mixed publish($channel, $message)
     * @method mixed pubsub($keyword, $argument)
     * @method mixed punsubscribe($patterns = null)
     * @method mixed rPop($key)
     * @method mixed rPush($key, ...$value1)
     * @method mixed rPushx($key, $value)
     * @method mixed randomKey()
     * @method mixed rawCommand($command, $arguments)
     * @method mixed rename($srcKey, $dstKey)
     * @method mixed renameKey($srcKey, $dstKey)
     * @method mixed renameNx($srcKey, $dstKey)
     * @method mixed resetStat()
     * @method mixed restore($key, $ttl, $value)
     * @method mixed rpoplpush($srcKey, $dstKey)
     * @method mixed sAdd($key, ...$value1)
     * @method mixed sAddArray($key, array $values)
     * @method mixed sCard($key)
     * @method mixed sContains($key, $value)
     * @method mixed sDiff($key1, ...$otherKeys)
     * @method mixed sDiffStore($dstKey, $key1, ...$otherKeys)
     * @method mixed sGetMembers($key)
     * @method mixed sInter($key1, ...$otherKeys)
     * @method mixed sInterStore($dstKey, $key1, ...$otherKeys)
     * @method mixed sIsMember($key, $value)
     * @method mixed sMembers($key)
     * @method mixed sMove($srcKey, $dstKey, $member)
     * @method mixed sPop($key, $count = 1)
     * @method mixed sRandMember($key, $count = 1)
     * @method mixed sRem($key, ...$member1)
     * @method mixed sRemove($key, ...$member1)
     * @method mixed sScan($key, &$iterator, $pattern = null, $count = 0)
     * @method mixed sUnion($key1, ...$otherKeys)
     * @method mixed sUnionStore($dstKey, $key1, ...$otherKeys)
     * @method mixed save()
     * @method mixed scan(&$iterator, $pattern = null, $count = 0)
     * @method mixed script($command, $script)
     * @method mixed select($dbIndex)
     * @method mixed set($key, $value, $timeout = null)
     * @method mixed setBit($key, $offset, $value)
     * @method mixed setOption($option, $value)
     * @method mixed setRange($key, $offset, $value)
     * @method mixed setTimeout($key, $ttl)
     * @method mixed setex($key, $ttl, $value)
     * @method mixed setnx($key, $value)
     * @method mixed slaveof($host = '127.0.0.1', $port = 6379)
     * @method mixed slowLog(string $operation, int $length = null)
     * @method mixed sort($key, $option = null)
     * @method mixed strlen($key)
     * @method mixed subscribe($channels, $callback)
     * @method mixed substr($key, $start, $end)
     * @method mixed swapdb(int $db1, int $db2)
     * @method mixed time()
     * @method mixed ttl($key)
     * @method mixed type($key)
     * @method mixed unlink($key1, $key2 = null, $key3 = null)
     * @method mixed unsubscribe($channels = null)
     * @method mixed unwatch()
     * @method mixed wait($numSlaves, $timeout)
     * @method mixed watch($key)
     * @method mixed xAck($stream, $group, $messages)
     * @method mixed xAdd($key, $id, $messages, $maxLen = 0, $isApproximate = false)
     * @method mixed xClaim($key, $group, $consumer, $minIdleTime, $ids, $options = [])
     * @method mixed xDel($key, $ids)
     * @method mixed xGroup($operation, $key, $group, $msgId = '', $mkStream = false)
     * @method mixed xInfo($operation, $stream, $group)
     * @method mixed xLen($stream)
     * @method mixed xPending($stream, $group, $start = null, $end = null, $count = null, $consumer = null)
     * @method mixed xRange($stream, $start, $end, $count = null)
     * @method mixed xRead($streams, $count = null, $block = null)
     * @method mixed xReadGroup($group, $consumer, $streams, $count = null, $block = null)
     * @method mixed xRevRange($stream, $end, $start, $count = null)
     * @method mixed xTrim($stream, $maxLen, $isApproximate)
     * @method mixed zAdd($key, $score1, $value1, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
     * @method mixed zCard($key)
     * @method mixed zCount($key, $start, $end)
     * @method mixed zDelete($key, $member1, ...$otherMembers)
     * @method mixed zDeleteRangeByRank($key, $start, $end)
     * @method mixed zDeleteRangeByScore($key, $start, $end)
     * @method mixed zIncrBy($key, $value, $member)
     * @method mixed zInter($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
     * @method mixed zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
     * @method mixed zPopMax($key, $count = 1)
     * @method mixed zPopMin($key, $count = 1)
     * @method mixed zRange($key, $start, $end, $withscores = null)
     * @method mixed zRangeByLex($key, $min, $max, $offset = null, $limit = null)
     * @method mixed zRangeByScore($key, $start, $end, array $options = array())
     * @method mixed zRank($key, $member)
     * @method mixed zRem($key, $member1, ...$otherMembers)
     * @method mixed zRemRangeByRank($key, $start, $end)
     * @method mixed zRemRangeByScore($key, $start, $end)
     * @method mixed zRevRange($key, $start, $end, $withscore = null)
     * @method mixed zRevRangeByLex($key, $min, $max, $offset = null, $limit = null)
     * @method mixed zRevRangeByScore($key, $start, $end, array $options = array())
     * @method mixed zRevRank($key, $member)
     * @method mixed zScan($key, &$iterator, $pattern = null, $count = 0)
     * @method mixed zScore($key, $member)
     * @method mixed zSize($key)
     * @method mixed zUnion($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
     * @method mixed zUnionStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
     */
    class Database
    {

    }

}

namespace Illuminate\Support\Facades {

    /**
     * @method static mixed append($key, $value)
     * @method static mixed auth($password)
     * @method static mixed bgrewriteaof()
     * @method static mixed bgsave()
     * @method static mixed bitCount($key)
     * @method static mixed bitOp($operation, $retKey, $key1, ...$otherKeys)
     * @method static mixed bitpos($key, $bit, $start = 0, $end = null)
     * @method static mixed blPop($keys, $timeout)
     * @method static mixed brPop(array $keys, $timeout)
     * @method static mixed brpoplpush($srcKey, $dstKey, $timeout)
     * @method static mixed bzPopMax($key1, $key2, $timeout)
     * @method static mixed bzPopMin($key1, $key2, $timeout)
     * @method static mixed clearLastError()
     * @method static mixed client($command, $value = '')
     * @method static mixed close()
     * @method static mixed config($operation, $key, $value)
     * @method static mixed dbSize()
     * @method static mixed decr($key)
     * @method static mixed decrBy($key, $value)
     * @method static mixed del($key1, ...$otherKeys)
     * @method static mixed delete($key1, $key2 = null, $key3 = null)
     * @method static mixed discard()
     * @method static mixed dump($key)
     * @method static mixed echo($message)
     * @method static mixed eval($script, $args = array(), $numKeys = 0)
     * @method static mixed evalSha($scriptSha, $args = array(), $numKeys = 0)
     * @method static mixed evaluate($script, $args = array(), $numKeys = 0)
     * @method static mixed evaluateSha($scriptSha, $args = array(), $numKeys = 0)
     * @method static mixed exec()
     * @method static mixed exists($key)
     * @method static mixed expire($key, $ttl)
     * @method static mixed expireAt($key, $timestamp)
     * @method static mixed flushAll()
     * @method static mixed flushDB()
     * @method static mixed geoadd($key, $longitude, $latitude, $member)
     * @method static mixed geodist($key, $member1, $member2, $unit = null)
     * @method static mixed geohash($key, ...$member)
     * @method static mixed geopos(string $key, string $member)
     * @method static mixed georadius($key, $longitude, $latitude, $radius, $unit, array $options = null)
     * @method static mixed georadiusbymember($key, $member, $radius, $units, array $options = null)
     * @method static mixed get($key)
     * @method static mixed getAuth()
     * @method static mixed getBit($key, $offset)
     * @method static mixed getDbNum()
     * @method static mixed getHost()
     * @method static mixed getKeys($pattern)
     * @method static mixed getLastError()
     * @method static mixed getMode()
     * @method static mixed getMultiple(array $keys)
     * @method static mixed getOption($option)
     * @method static mixed getPersistentID()
     * @method static mixed getPort()
     * @method static mixed getRange($key, $start, $end)
     * @method static mixed getReadTimeout()
     * @method static mixed getSet($key, $value)
     * @method static mixed getTimeout()
     * @method static mixed hDel($key, $hashKey1, ...$otherHashKeys)
     * @method static mixed hExists($key, $hashKey)
     * @method static mixed hGet($key, $hashKey)
     * @method static mixed hGetAll($key)
     * @method static mixed hIncrBy($key, $hashKey, $value)
     * @method static mixed hIncrByFloat($key, $field, $increment)
     * @method static mixed hKeys($key)
     * @method static mixed hLen($key)
     * @method static mixed hMGet($key, $hashKeys)
     * @method static mixed hMSet($key, $hashKeys)
     * @method static mixed hScan($key, &$iterator, $pattern = null, $count = 0)
     * @method static mixed hSet($key, $hashKey, $value)
     * @method static mixed hSetNx($key, $hashKey, $value)
     * @method static mixed hStrLen(string $key, string $field)
     * @method static mixed hVals($key)
     * @method static mixed incr($key)
     * @method static mixed incrBy($key, $value)
     * @method static mixed incrByFloat($key, $increment)
     * @method static mixed info($option = null)
     * @method static mixed isConnected()
     * @method static mixed keys($pattern)
     * @method static mixed lGet($key, $index)
     * @method static mixed lGetRange($key, $start, $end)
     * @method static mixed lIndex($key, $index)
     * @method static mixed lInsert($key, $position, $pivot, $value)
     * @method static mixed lLen($key)
     * @method static mixed lPop($key)
     * @method static mixed lPush($key, ...$value1)
     * @method static mixed lPushx($key, $value)
     * @method static mixed lRange($key, $start, $end)
     * @method static mixed lRem($key, $value, $count)
     * @method static mixed lRemove($key, $value, $count)
     * @method static mixed lSet($key, $index, $value)
     * @method static mixed lSize($key)
     * @method static mixed lTrim($key, $start, $stop)
     * @method static mixed lastSave()
     * @method static mixed listTrim($key, $start, $stop)
     * @method static mixed mget(array $array)
     * @method static mixed migrate($host, $port, $key, $db, $timeout, $copy = false, $replace = false)
     * @method static mixed move($key, $dbIndex)
     * @method static mixed mset(array $array)
     * @method static mixed msetnx(array $array)
     * @method static mixed multi($mode)
     * @method static mixed object($string = '', $key = '')
     * @method static mixed pExpire($key, $ttl)
     * @method static mixed pExpireAt($key, $timestamp)
     * @method static mixed persist($key)
     * @method static mixed pfAdd($key, array $elements)
     * @method static mixed pfCount($key)
     * @method static mixed pfMerge($destKey, array $sourceKeys)
     * @method static mixed ping()
     * @method static mixed psetex($key, $ttl, $value)
     * @method static mixed psubscribe($patterns, $callback)
     * @method static mixed pttl($key)
     * @method static mixed publish($channel, $message)
     * @method static mixed pubsub($keyword, $argument)
     * @method static mixed punsubscribe($patterns = null)
     * @method static mixed rPop($key)
     * @method static mixed rPush($key, ...$value1)
     * @method static mixed rPushx($key, $value)
     * @method static mixed randomKey()
     * @method static mixed rawCommand($command, $arguments)
     * @method static mixed rename($srcKey, $dstKey)
     * @method static mixed renameKey($srcKey, $dstKey)
     * @method static mixed renameNx($srcKey, $dstKey)
     * @method static mixed resetStat()
     * @method static mixed restore($key, $ttl, $value)
     * @method static mixed rpoplpush($srcKey, $dstKey)
     * @method static mixed sAdd($key, ...$value1)
     * @method static mixed sAddArray($key, array $values)
     * @method static mixed sCard($key)
     * @method static mixed sContains($key, $value)
     * @method static mixed sDiff($key1, ...$otherKeys)
     * @method static mixed sDiffStore($dstKey, $key1, ...$otherKeys)
     * @method static mixed sGetMembers($key)
     * @method static mixed sInter($key1, ...$otherKeys)
     * @method static mixed sInterStore($dstKey, $key1, ...$otherKeys)
     * @method static mixed sIsMember($key, $value)
     * @method static mixed sMembers($key)
     * @method static mixed sMove($srcKey, $dstKey, $member)
     * @method static mixed sPop($key, $count = 1)
     * @method static mixed sRandMember($key, $count = 1)
     * @method static mixed sRem($key, ...$member1)
     * @method static mixed sRemove($key, ...$member1)
     * @method static mixed sScan($key, &$iterator, $pattern = null, $count = 0)
     * @method static mixed sUnion($key1, ...$otherKeys)
     * @method static mixed sUnionStore($dstKey, $key1, ...$otherKeys)
     * @method static mixed save()
     * @method static mixed scan(&$iterator, $pattern = null, $count = 0)
     * @method static mixed script($command, $script)
     * @method static mixed select($dbIndex)
     * @method static mixed set($key, $value, $timeout = null)
     * @method static mixed setBit($key, $offset, $value)
     * @method static mixed setOption($option, $value)
     * @method static mixed setRange($key, $offset, $value)
     * @method static mixed setTimeout($key, $ttl)
     * @method static mixed setex($key, $ttl, $value)
     * @method static mixed setnx($key, $value)
     * @method static mixed slaveof($host = '127.0.0.1', $port = 6379)
     * @method static mixed slowLog(string $operation, int $length = null)
     * @method static mixed sort($key, $option = null)
     * @method static mixed strlen($key)
     * @method static mixed subscribe($channels, $callback)
     * @method static mixed substr($key, $start, $end)
     * @method static mixed swapdb(int $db1, int $db2)
     * @method static mixed time()
     * @method static mixed ttl($key)
     * @method static mixed type($key)
     * @method static mixed unlink($key1, $key2 = null, $key3 = null)
     * @method static mixed unsubscribe($channels = null)
     * @method static mixed unwatch()
     * @method static mixed wait($numSlaves, $timeout)
     * @method static mixed watch($key)
     * @method static mixed xAck($stream, $group, $messages)
     * @method static mixed xAdd($key, $id, $messages, $maxLen = 0, $isApproximate = false)
     * @method static mixed xClaim($key, $group, $consumer, $minIdleTime, $ids, $options = [])
     * @method static mixed xDel($key, $ids)
     * @method static mixed xGroup($operation, $key, $group, $msgId = '', $mkStream = false)
     * @method static mixed xInfo($operation, $stream, $group)
     * @method static mixed xLen($stream)
     * @method static mixed xPending($stream, $group, $start = null, $end = null, $count = null, $consumer = null)
     * @method static mixed xRange($stream, $start, $end, $count = null)
     * @method static mixed xRead($streams, $count = null, $block = null)
     * @method static mixed xReadGroup($group, $consumer, $streams, $count = null, $block = null)
     * @method static mixed xRevRange($stream, $end, $start, $count = null)
     * @method static mixed xTrim($stream, $maxLen, $isApproximate)
     * @method static mixed zAdd($key, $score1, $value1, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
     * @method static mixed zCard($key)
     * @method static mixed zCount($key, $start, $end)
     * @method static mixed zDelete($key, $member1, ...$otherMembers)
     * @method static mixed zDeleteRangeByRank($key, $start, $end)
     * @method static mixed zDeleteRangeByScore($key, $start, $end)
     * @method static mixed zIncrBy($key, $value, $member)
     * @method static mixed zInter($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
     * @method static mixed zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
     * @method static mixed zPopMax($key, $count = 1)
     * @method static mixed zPopMin($key, $count = 1)
     * @method static mixed zRange($key, $start, $end, $withscores = null)
     * @method static mixed zRangeByLex($key, $min, $max, $offset = null, $limit = null)
     * @method static mixed zRangeByScore($key, $start, $end, array $options = array())
     * @method static mixed zRank($key, $member)
     * @method static mixed zRem($key, $member1, ...$otherMembers)
     * @method static mixed zRemRangeByRank($key, $start, $end)
     * @method static mixed zRemRangeByScore($key, $start, $end)
     * @method static mixed zRevRange($key, $start, $end, $withscore = null)
     * @method static mixed zRevRangeByLex($key, $min, $max, $offset = null, $limit = null)
     * @method static mixed zRevRangeByScore($key, $start, $end, array $options = array())
     * @method static mixed zRevRank($key, $member)
     * @method static mixed zScan($key, &$iterator, $pattern = null, $count = 0)
     * @method static mixed zScore($key, $member)
     * @method static mixed zSize($key)
     * @method static mixed zUnion($Output, $ZSetKeys, array $Weights = null, $aggregateFunction = 'SUM')
     * @method static mixed zUnionStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
     */
    class Redis
    {

    }

}
